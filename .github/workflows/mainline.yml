# Whenever a tag push matching pattern "v*" then run the job
on: 
  push:
    tags:
      - "v*"

jobs:
  # job id, can be anything
  unit_test:
    runs-on: ubuntu-latest
    name: Unit Test
    container:
      image: docker://barichello/godot-ci:3.5.1
    strategy:
      fail-fast: true
    steps:
      # Always include the checkout step so that 
      # your project is available for Godot to export
    - name: checkout
      uses: actions/checkout@v3.0.2
      # Ensure that you get the entire project history
      with:
        fetch-depth: 0
    # Automatically stores the tag name for later use
    - name: get tag from version
      id: tag_version
      run: |
        echo ::set-output name=TAG_VERSION::${GITHUB_REF#refs/tags/v}

    - name: run unit tests
      id: run_unit_tests
      run: |
        chmod a+x runtest.sh && ./runtest.sh
      
  export_game:
    # Always use ubuntu-latest for this action
    runs-on: ubuntu-latest
    # Job name, can be anything
    name: Export Game
    strategy:
      fail-fast: true
    steps:
      # Always include the checkout step so that 
      # your project is available for Godot to export
    - name: checkout
      uses: actions/checkout@v3.0.2
      # Ensure that you get the entire project history
      with:
        fetch-depth: 0
  
    # Automatically stores the tag name for later use
    - name: get tag from version
      id: tag_version
      run: |
        echo ::set-output name=TAG_VERSION::${GITHUB_REF#refs/tags/v}

    - name: export game
      id: export
      # Use latest version (see releases for all versions)
      uses: firebelley/godot-export@v4.1.1
      with:
        # Defining all the required inputs
        godot_executable_download_url: https://github.com/godotengine/godot/releases/download/3.5.1-stable/Godot_v3.5.1-stable_linux_headless.64.zip
        godot_export_templates_download_url: https://github.com/godotengine/godot/releases/download/3.5.1-stable/Godot_v3.5.1-stable_export_templates.tpz
        relative_project_path: ./
        archive_output: true
    - name: list export
      id: list_export
      run: ls -lha ${{ steps.export.outputs.archive_directory }}
    - name: upload windows artifact
      id: upload_win_artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.tag_version.outputs.TAG_VERSION }}-win
        path: ${{ steps.export.outputs.archive_directory }}/win.zip
    - name: upload linux artifact
      id: upload_linux_artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.tag_version.outputs.TAG_VERSION }}-linux
        path: ${{ steps.export.outputs.archive_directory }}/linux.zip
    - name: download-artifact-win
      id: artifact_win_download
      uses: actions/download-artifact@v2.0.8
      with:
        name: ${{ steps.tag_version.outputs.TAG_VERSION }}-win
        path: build/win
    - name: download-artifact-linux
      id: artifact_linux_download
      uses: actions/download-artifact@v2.0.8
      with:
        name: ${{ steps.tag_version.outputs.TAG_VERSION }}-linux
        path: build/linux
    - name: list artifact
      id: list_artifact
      run: ls -lha ./build/win
    - name: push windows to itch
      id: itch_win_push
      uses: KikimoraGames/itch-publish@v0.0.3
      with:
        butlerApiKey: ${{secrets.BUTLER_API_KEY}}
        gameData: ./build/win/win.zip
        itchUsername: ${{secrets.ITCH_USERNAME}}
        itchGameId: ${{ secrets.ITCH_GAME_ID }}
        buildChannel: windows
        buildNumber: ${{ steps.tag_version.outputs.TAG_VERSION }}
    - name: push linux to itch
      id: itch_linux_push
      uses: KikimoraGames/itch-publish@v0.0.3
      with:
        butlerApiKey: ${{secrets.BUTLER_API_KEY}}
        gameData: ./build/linux/linux.zip
        itchUsername: ${{secrets.ITCH_USERNAME}}
        itchGameId: ${{ secrets.ITCH_GAME_ID }}
        buildChannel: linux
        buildNumber: ${{ steps.tag_version.outputs.TAG_VERSION }}