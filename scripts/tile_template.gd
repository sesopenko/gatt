extends Node
class_name TileTemplate

static func get_2x2()->Array:
	# Provides all the possible combinations for 2x2
	# Using an aesthetic, easier to understand map rather than
	# computing them all.
	
	# Reference: https://docs.godotengine.org/en/stable/tutorials/2d/using_tilemaps.html#autotiles
	var squares = [
		# Row 0
		[0, 0,
		1, 0],
		
		[0, 1,
		0, 1],
		
		[1, 0,
		1, 1,],
		
		[0, 0,
		1, 1,],
		
		# Row 1
		[1, 0,
		0, 1,],
		
		[0, 1,
		1, 1,],
		
		[1, 1,
		1, 1,],
		
		[1 ,1,
		1, 0],
		
		# Row 2
		[0, 1,
		0, 0,],
		
		[1, 1,
		0, 0,],
		
		[1, 1,
		0, 1,],
		
		[1, 0,
		1, 0,],
		
		# Row 3
		[0, 0,
		0, 0,],
		
		[0, 0,
		0, 1,],
		
		[0, 1,
		1, 0,],
		
		[1, 0,
		0, 0,],
	]
	return squares
	
static func get_3x3()->Array:
	# Provides all the possible combinations for 3x3 in a more aesthetic manner than automatically
	# generating them.
	
	# Source: https://docs.godotengine.org/en/stable/tutorials/2d/using_tilemaps.html#autotiles
	var squares = [
		[0, 0, 0,
		0, 1, 0,
		0, 1, 0],
		
		[0, 0, 0,
		0, 1, 1,
		0, 1, 0,],
		
		[0, 0, 0,
		1, 1, 1,
		0, 1, 0,],
		
		[0, 0, 0,
		1, 1, 0,
		0, 1, 0,],
		
		[1, 1, 0,
		1, 1, 1,
		0, 1, 0,],
		
		[0, 0, 0,
		1, 1, 1,
		0, 1, 1,],
		
		[0, 0, 0,
		1, 1, 1,
		1, 1, 0,],
		
		[0, 1, 1,
		1, 1, 1,
		0, 1, 0,],
		
		[0, 0, 0,
		0, 1, 1,
		0, 1, 1,],
		
		[0, 1, 0,
		1, 1, 1,
		1, 1, 1,],
		
		[0, 0, 0,
		1, 1, 1,
		1, 1, 1,],
		
		[0, 0, 0,
		1, 1, 0,
		1, 1, 0,],
		
		[0, 1, 0,
		0, 1, 0,
		0, 1, 0,],
		
		[0, 1, 0,
		0, 1, 1,
		0, 1, 0],
		
		[0, 1, 0,
		1, 1, 1,
		0, 1, 0],
		
		[0, 1, 0,
		1, 1, 0,
		0, 1, 0,],
		
		[0, 1, 0,
		0, 1, 1,
		0, 1, 1,],
		
		[0, 1, 1,
		1, 1, 1,
		1, 1, 1,],
		
		[1, 1, 0,
		1, 1, 1,
		1, 1, 1,],
		
		[0, 1, 0,
		1, 1, 0,
		1, 1, 0,],
		
		[0, 1, 1,
		0, 1, 1,
		0, 1, 1,],
		
		[0, 1, 1,
		1, 1, 1,
		1, 1, 0,],
		
		[0, 0, 0,
		0, 0, 0,
		0, 0, 0],
		
		[1, 1, 0,
		1, 1, 1,
		1, 1, 0,],
		
		[0, 1, 0,
		0, 1, 0,
		0, 0, 0],
		
		[0, 1, 0,
		0, 1, 1,
		0, 0, 0],
		
		[0, 1, 0,
		1, 1, 1,
		0, 0, 0,],
		
		[0, 1, 0,
		1, 1, 0,
		0, 0, 0,],
		
		[0, 1, 1,
		0, 1, 1,
		0, 1, 0,],
		
		[1, 1, 1,
		1, 1, 1,
		0, 1, 1,],
		
		[1, 1, 1,
		1, 1, 1,
		1, 1, 0,],
		
		[1, 1, 0,
		1, 1, 0,
		0, 1, 0,],
		
		[0, 1, 1,
		1, 1, 1,
		0, 1, 1,],
		
		[1, 1, 1,
		1, 1, 1,
		1, 1, 1,],
		
		[1, 1, 0,
		1, 1, 1,
		0, 1, 1,],
		
		[1, 1, 0,
		1, 1, 0,
		1, 1, 0,], 
		
		[0, 0, 0,
		0, 1, 0, 
		0, 0, 0,],
		
		[0, 0, 0,
		0, 1, 1,
		0, 0, 0,],
		
		[0, 0, 0,
		1, 1, 1,
		0, 0, 0],
		
		[0, 0, 0,
		1, 1, 0,
		0, 0, 0,],
		
		[0, 1, 0,
		1, 1, 1,
		1, 1, 0,],
		
		[0, 1, 1,
		1, 1, 1,
		0, 0, 0,],
		
		[1, 1, 0,
		1, 1, 1,
		0, 0, 0],
		
		[0, 1, 0,
		1, 1, 1,
		0, 1, 1,],
		
		[0, 1, 1,
		0, 1, 1,
		0, 0, 0,],
		
		[1, 1, 1,
		1, 1, 1,
		0, 0, 0,],
		
		[1, 1, 1,
		1, 1, 1,
		0, 1, 0,],
		
		[1, 1, 0,
		1, 1, 0,
		0, 0, 0,]
		
	]
	return squares
